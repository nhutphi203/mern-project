import fetch from 'node-fetch';
import { config } from 'dotenv';

config({ path: './config/config.env' });

console.log('üîê KI·ªÇM TRA H·ªÜ TH·ªêNG SOCIAL LOGIN');
console.log('==================================');

// Ki·ªÉm tra c·∫•u h√¨nh OAuth
function checkOAuthConfig() {
  console.log('\nüìã 1. KI·ªÇM TRA C·∫§U H√åNH OAUTH');
  console.log('================================');

  const configs = {
    'Google': {
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      status: 'unknown'
    },
    'GitHub': {
      clientId: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
      status: 'unknown'
    },
    'Facebook': {
      clientId: process.env.FACEBOOK_APP_ID,
      clientSecret: process.env.FACEBOOK_APP_SECRET,
      status: 'unknown'
    }
  };

  Object.entries(configs).forEach(([provider, config]) => {
    console.log(`\nüîë ${provider}:`);

    if (config.clientId && config.clientId !== 'your-facebook-id' && config.clientSecret && config.clientSecret !== 'your-facebook-secret') {
      console.log(`   ‚úÖ Client ID: ${config.clientId.substring(0, 20)}...`);
      console.log(`   ‚úÖ Client Secret: ${config.clientSecret.substring(0, 8)}...`);
      configs[provider].status = 'configured';
    } else {
      console.log(`   ‚ùå Ch∆∞a c·∫•u h√¨nh ƒë√∫ng`);
      configs[provider].status = 'not_configured';
    }
  });

  return configs;
}

// Ki·ªÉm tra OAuth endpoints
async function checkOAuthEndpoints() {
  console.log('\nüì° 2. KI·ªÇM TRA OAUTH ENDPOINTS');
  console.log('==============================');

  const baseURL = 'http://localhost:4000/api/v1/users/auth';
  const providers = ['google', 'github', 'facebook'];

  for (const provider of providers) {
    try {
      console.log(`\nüîç Testing ${provider} endpoint...`);

      const response = await fetch(`${baseURL}/${provider}`, {
        method: 'GET',
        redirect: 'manual' // Kh√¥ng follow redirects
      });

      console.log(`   üìä Status: ${response.status}`);

      if (response.status === 302) {
        const location = response.headers.get('location');
        if (location) {
          console.log(`   ‚úÖ Redirect to: ${location.substring(0, 50)}...`);

          // Ki·ªÉm tra redirect URL c√≥ ƒë√∫ng format OAuth kh√¥ng
          if (location.includes('oauth') || location.includes('authorize')) {
            console.log(`   ‚úÖ OAuth redirect detected`);
          } else {
            console.log(`   ‚ö†Ô∏è Unexpected redirect URL`);
          }
        }
      } else {
        console.log(`   ‚ùå Unexpected status (expected 302)`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    }
  }
}

// Test database connection v√† user creation
async function testSocialUserCreation() {
  console.log('\nüíæ 3. TEST SOCIAL USER CREATION');
  console.log('================================');

  try {
    // Import models
    await import('./models/userScheme.js');
    const mongoose = await import('mongoose');

    await mongoose.default.connect(process.env.MONGO_URI);
    console.log('‚úÖ Database connected');

    const User = mongoose.default.model('User');

    // Test creating a social user
    const testSocialUser = {
      firstName: 'Test',
      lastName: 'SocialUser',
      email: `testsocial${Date.now()}@example.com`,
      authType: 'google',
      providerId: 'test123',
      role: 'Patient',
      isVerified: true,
      phone: '0000000000',
      nic: '000000000000',
      dob: new Date('1990-01-01'),
      gender: 'Other'
    };

    console.log('\nüîç Testing social user creation...');
    const user = await User.create(testSocialUser);
    console.log(`‚úÖ Social user created: ${user.firstName} ${user.lastName}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üîë Auth Type: ${user.authType}`);
    console.log(`   üÜî Provider ID: ${user.providerId}`);

    // Clean up test user
    await User.findByIdAndDelete(user._id);
    console.log('üßπ Test user cleaned up');

    mongoose.default.disconnect();

  } catch (error) {
    console.log(`‚ùå Database test error: ${error.message}`);
  }
}

// Test callback URLs
function testCallbackUrls() {
  console.log('\nüîó 4. KI·ªÇM TRA CALLBACK URLS');
  console.log('============================');

  const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:8080';
  const backendUrl = process.env.BACKEND_URL || 'http://localhost:4000';

  const providers = ['google', 'github', 'facebook'];

  providers.forEach(provider => {
    const callbackUrl = `${backendUrl}/api/v1/users/auth/${provider}/callback`;
    console.log(`\nüîó ${provider.toUpperCase()} Callback URL:`);
    console.log(`   ${callbackUrl}`);

    // Ki·ªÉm tra format URL
    try {
      new URL(callbackUrl);
      console.log(`   ‚úÖ Valid URL format`);
    } catch {
      console.log(`   ‚ùå Invalid URL format`);
    }
  });

  console.log(`\nüéØ Frontend Redirect URL: ${frontendUrl}/dashboard`);
  console.log(`üéØ Error Redirect URL: ${frontendUrl}/login`);
}

// Ki·ªÉm tra existing social users
async function checkExistingSocialUsers() {
  console.log('\nüë• 5. KI·ªÇM TRA EXISTING SOCIAL USERS');
  console.log('===================================');

  try {
    await import('./models/userScheme.js');
    const mongoose = await import('mongoose');

    await mongoose.default.connect(process.env.MONGO_URI);

    const User = mongoose.default.model('User');

    // T√¨m social users
    const socialUsers = await User.find({
      authType: { $in: ['google', 'github', 'facebook'] }
    }).select('firstName lastName email authType providerId isVerified');

    console.log(`üìä Found ${socialUsers.length} social users:`);

    if (socialUsers.length > 0) {
      socialUsers.forEach((user, index) => {
        console.log(`\n${index + 1}. ${user.firstName} ${user.lastName}`);
        console.log(`   üìß Email: ${user.email}`);
        console.log(`   üîë Auth Type: ${user.authType}`);
        console.log(`   ‚úÖ Verified: ${user.isVerified}`);
        console.log(`   üÜî Provider ID: ${user.providerId || 'N/A'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è Ch∆∞a c√≥ user n√†o ƒëƒÉng nh·∫≠p b·∫±ng social media');
    }

    mongoose.default.disconnect();

  } catch (error) {
    console.log(`‚ùå Error: ${error.message}`);
  }
}

// Main test function
async function runSocialLoginTests() {
  console.log('üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA SOCIAL LOGIN SYSTEM...\n');

  const configs = checkOAuthConfig();
  await checkOAuthEndpoints();
  await testSocialUserCreation();
  testCallbackUrls();
  await checkExistingSocialUsers();

  console.log('\nüéØ T·ªîNG K·∫æT SOCIAL LOGIN STATUS');
  console.log('===============================');

  Object.entries(configs).forEach(([provider, config]) => {
    const status = config.status === 'configured' ? '‚úÖ READY' : '‚ùå NOT CONFIGURED';
    console.log(`${provider}: ${status}`);
  });

  console.log('\nüí° H∆Ø·ªöNG D·∫™N TI·∫æP THEO:');
  console.log('1. Google v√† GitHub ƒë√£ c·∫•u h√¨nh, c√≥ th·ªÉ test ngay');
  console.log('2. Facebook c·∫ßn c·∫•u h√¨nh FACEBOOK_APP_ID v√† FACEBOOK_APP_SECRET');
  console.log('3. Test b·∫±ng c√°ch truy c·∫≠p: http://localhost:4000/api/v1/users/auth/google');
  console.log('4. Ho·∫∑c test t·ª´ frontend: http://localhost:8080/login');

  console.log('\nüîß DEBUG URLS (paste v√†o browser):');
  console.log('Google: http://localhost:4000/api/v1/users/auth/google');
  console.log('GitHub: http://localhost:4000/api/v1/users/auth/github');
}

runSocialLoginTests();
