import fetch from 'node-fetch';

const baseURL = 'http://localhost:4000/api/v1';

console.log('üè• B·∫ÆT ƒê·∫¶U TEST C√ÅC CH·ª®C NƒÇNG C·ªêT L√ïI');
console.log('==============================================');

// TEST 1: Qu·∫£n l√Ω b·ªánh nh√¢n (Patient Management)
async function testPatientManagement() {
  console.log('\nüìã TEST 1: Qu·∫£n l√Ω B·ªánh nh√¢n');
  console.log('-----------------------------');

  try {
    // L·∫•y danh s√°ch t·∫•t c·∫£ b·ªánh nh√¢n
    console.log('üîç L·∫•y danh s√°ch b·ªánh nh√¢n...');
    const patientsResponse = await fetch(`${baseURL}/users`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('üìä Status:', patientsResponse.status);
    if (patientsResponse.ok) {
      const data = await patientsResponse.json();
      console.log('‚úÖ L·∫•y danh s√°ch th√†nh c√¥ng');
      console.log('üë• S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng:', data.users?.length || 0);

      // ƒê·∫øm s·ªë b·ªánh nh√¢n
      const patients = data.users?.filter(user => user.role === 'Patient') || [];
      console.log('üè• S·ªë b·ªánh nh√¢n:', patients.length);

      if (patients.length > 0) {
        console.log('üìù B·ªánh nh√¢n m·∫´u:', patients[0].firstName, patients[0].lastName, '|', patients[0].email);
      }
    } else {
      console.log('‚ùå L·ªói:', await patientsResponse.text());
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
  }
}

// TEST 2: Qu·∫£n l√Ω b√°c sƒ© (Doctor Management)
async function testDoctorManagement() {
  console.log('\nüë®‚Äç‚öïÔ∏è TEST 2: Qu·∫£n l√Ω B√°c sƒ©');
  console.log('-----------------------------');

  try {
    console.log('üîç L·∫•y danh s√°ch b√°c sƒ©...');
    const doctorsResponse = await fetch(`${baseURL}/users/doctors`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('üìä Status:', doctorsResponse.status);
    if (doctorsResponse.ok) {
      const data = await doctorsResponse.json();
      console.log('‚úÖ L·∫•y danh s√°ch b√°c sƒ© th√†nh c√¥ng');
      console.log('üë®‚Äç‚öïÔ∏è S·ªë b√°c sƒ©:', data.doctors?.length || 0);

      if (data.doctors?.length > 0) {
        console.log('üìù B√°c sƒ© m·∫´u:', data.doctors[0].firstName, data.doctors[0].lastName);
        console.log('üè• Chuy√™n khoa:', data.doctors[0].department || 'Ch∆∞a c√≥');
      }
    } else {
      console.log('‚ùå L·ªói:', await doctorsResponse.text());
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
  }
}

// TEST 3: Medical Records (Ch·ª©c nƒÉng ƒë√£ fix)
async function testMedicalRecords() {
  console.log('\nüìã TEST 3: H·ªì s∆° Y t·∫ø');
  console.log('------------------------');

  try {
    console.log('üîç L·∫•y t·ªïng quan h·ªì s∆° y t·∫ø...');
    const recordsResponse = await fetch(`${baseURL}/medical-records/summary`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('üìä Status:', recordsResponse.status);
    if (recordsResponse.ok) {
      const data = await recordsResponse.json();
      console.log('‚úÖ L·∫•y h·ªì s∆° y t·∫ø th√†nh c√¥ng');
      console.log('üìä S·ªë h·ªì s∆°:', data.records?.length || 0);

      if (data.records?.length > 0) {
        data.records.forEach((record, index) => {
          console.log(`üìù H·ªì s∆° ${index + 1}:`);
          console.log(`   - ID: ${record._id}`);
          console.log(`   - B·ªánh nh√¢n: ${record.patientName || 'Kh√¥ng c√≥ t√™n'}`);
          console.log(`   - Ng√†y t·∫°o: ${new Date(record.createdAt).toLocaleDateString('vi-VN')}`);
        });
      }
    } else {
      console.log('‚ùå L·ªói:', await recordsResponse.text());
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
  }
}

// TEST 4: Appointment System
async function testAppointmentSystem() {
  console.log('\nüìÖ TEST 4: H·ªá th·ªëng ƒê·∫∑t l·ªãch');
  console.log('------------------------------');

  try {
    console.log('üîç L·∫•y danh s√°ch cu·ªôc h·∫πn...');
    const appointmentsResponse = await fetch(`${baseURL}/appointment/getall`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('üìä Status:', appointmentsResponse.status);
    if (appointmentsResponse.ok) {
      const data = await appointmentsResponse.json();
      console.log('‚úÖ L·∫•y cu·ªôc h·∫πn th√†nh c√¥ng');
      console.log('üìÖ S·ªë cu·ªôc h·∫πn:', data.appointments?.length || 0);

      if (data.appointments?.length > 0) {
        const recent = data.appointments.slice(0, 3);
        recent.forEach((apt, index) => {
          console.log(`üìù Cu·ªôc h·∫πn ${index + 1}:`);
          console.log(`   - B·ªánh nh√¢n: ${apt.firstName} ${apt.lastName}`);
          console.log(`   - Ng√†y: ${new Date(apt.appointment_date).toLocaleDateString('vi-VN')}`);
          console.log(`   - Tr·∫°ng th√°i: ${apt.status}`);
        });
      }
    } else {
      console.log('‚ùå L·ªói:', await appointmentsResponse.text());
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
  }
}

// TEST 5: Lab System
async function testLabSystem() {
  console.log('\nüî¨ TEST 5: H·ªá th·ªëng X√©t nghi·ªám');
  console.log('-------------------------------');

  try {
    console.log('üîç L·∫•y danh s√°ch x√©t nghi·ªám...');
    const labResponse = await fetch(`${baseURL}/lab/results`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('üìä Status:', labResponse.status);
    if (labResponse.ok) {
      const data = await labResponse.json();
      console.log('‚úÖ L·∫•y k·∫øt qu·∫£ x√©t nghi·ªám th√†nh c√¥ng');
      console.log('üî¨ S·ªë k·∫øt qu·∫£:', data.results?.length || 0);
    } else {
      console.log('‚ùå L·ªói:', await labResponse.text());
    }
  } catch (error) {
    console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
  }
}

// Ch·∫°y t·∫•t c·∫£ c√°c test
async function runAllTests() {
  await testPatientManagement();
  await testDoctorManagement();
  await testMedicalRecords();
  await testAppointmentSystem();
  await testLabSystem();

  console.log('\nüéâ HO√ÄN TH√ÄNH TEST C√ÅC CH·ª®C NƒÇNG C·ªêT L√ïI');
  console.log('=====================================');
}

runAllTests();
